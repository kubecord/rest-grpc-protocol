syntax = "proto3";

import "arguments.proto";
import "auditlog.proto";
import "channel.proto";
import "emoji.proto";
import "guild.proto";
import "invite.proto";
import "member.proto";
import "options.proto";
import "results.proto";
import "role.proto";
import "user.proto";
import "webhook.proto";

service Discord {
  // Channel methods
  // GET /channels/{channel.id}
  rpc GetChannel(SnowflakeInput) returns (Channel);
  // PATCH /channels/{channel.id}
  rpc PatchChannel(Channel) returns (Channel);
  // DELETE /channels/{channel.id}
  rpc DeleteChannel(SnowflakeInput) returns (Channel);
  // GET /channels/{channel.id}/messages
  rpc GetChannelMessages(SnowflakeInput) returns (ReturnMessages);
  // GET /channels/{channel.id}/messages/{message.id}
  rpc GetChannelMessage(GenericMessageArguments) returns (Message);
  // POST /channels/{channel.id}/messages
  rpc CreateMessage(CreateMessageArguments) returns (Message);
  // PUT /channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me
  rpc ReactToMessage(MessageReactionArguments) returns (Empty);
  // DELETE /channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me
  rpc RemoveSelfReactionFromMessage(MessageReactionArguments) returns (Empty);
  // DELETE /channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}
  rpc RemoveUserReactionFromMessage(MessageReactionRemoveFromUserArguments) returns (Empty);
  // GET /channels/{channel.id}/messages/{message.id}/reactions/{emoji}
  rpc GetUsersForReaction(GetUsersForReactionArguments) returns (ReturnUsers);
  // DELETE /channels/{channel.id}/messages/{message.id}/reactions
  rpc DeleteAllReactionsFromMessage(GenericMessageArguments) returns (Empty);
  // PATCH /channels/{channel.id}/messages/{message.id}
  rpc EditMessage(EditMessageArguments) returns (Empty);
  // DELETE /channels/{channel.id}/messages/{message.id}
  rpc DeleteMessage(GenericMessageArguments) returns (Message);
  // POST /channels/{channel.id}/messages/bulk-delete
  rpc BulkDeleteMessages(BulkDeleteArguments) returns (ReturnMessages);
  // PUT /channels/{channel.id}/permissions/{overwrite.id}
  rpc EditChannelPermissions(EditChannelPermissionArguments) returns (Empty);
  // GET /channels/{channel.id}/invites
  rpc GetChannelInvites(SnowflakeInput) returns (ReturnInvites);
  // POST /channels/{channel.id}/invites
  rpc CreateChannelInvite(CreateChannelInviteArguments) returns (Invite);
  // DELETE /channels/{channel.id}/permissions/{overwrite.id}
  rpc DeleteChannelPermission(GenericPermissionsArguments) returns (Empty);
  // POST /channels/{channel.id}/typing
  rpc SendTypingInChannel(SnowflakeInput) returns (Empty);
  // GET /channels/{channel.id}/pins
  rpc GetChannelPins(SnowflakeInput) returns (ReturnMessages);
  // PUT /channels/{channel.id}/pins/{message.id}
  rpc PinMessageInChannel(GenericMessageArguments) returns (Empty);
  // DELETE /channels/{channel.id}/pins/{message.id}
  rpc UnpinMessageFromChannel(GenericMessageArguments) returns (Empty);

  // Emoji methods
  // GET /guilds/{guild.id}/emojis
  rpc GetGuildEmojis(SnowflakeInput) returns (ReturnEmojis);
  // GET /guilds/{guild.id}/emojis/{emoji.id}
  rpc GetGuildEmoji(GenericEmojiArguments) returns (Emoji);
  // POST /guilds/{guild.id}/emojis
  rpc CreateGuildEmoji(CreateEmojiArguments) returns (Emoji);
  // PATCH /guilds/{guild.id}/emojis/{emoji.id}
  rpc UpdateGuildEmoji(UpdateEmojiArguments) returns (Emoji);
  // DLEETE /guilds/{guild.id}/emojis/{emoji.id}
  rpc DeleteGuildEmoji(GenericEmojiArguments) returns (Empty);

  // Guild methods
  // GET /guilds/{guild.id}
  rpc GetGuild(SnowflakeInput) returns (Guild);
  // PATCH /guilds/{guild.id}
  rpc UpdateGuild(UpdateGuildArguments) returns (Guild);
  // GET /guilds/{guild.id}/channels
  rpc GetGuildChannels(SnowflakeInput) returns (ReturnChannels);
  // POST /guilds/{guild.id}/channels
  rpc CreateGuildChannel(CreateChannelArguments) returns (Channel);
  // PATCH /guilds/{guild.id}/channels
  rpc UpdateChannelPositions(UpdateChannelPositionsArguments) returns (Empty);
  // GET /guilds/{guild.id}/members/{user.id}
  rpc GetGuildMember(GenericUserArguments) returns (Member);
  // GET /guilds/{guild.id}/members
  rpc GetGuildMembers(GetGuildMemberArguments) returns (ReturnMembers);
  // PUT /guilds/{guild.id}/members/{user.id} || Special route: Returns 201 with a Member if added or 204 Empty otherwise
  rpc PutMemberInGuild(PutMemberInGuildArguments) returns (Member);
  // PATCH /guilds/{guild.id}/members/{user.id}
  rpc UpdateGuildMember(PatchMemberArguments) returns (Empty);
  // PATCH /guilds/{guild.id}/members/@me/nick
  rpc UpdateCurrentUserNickname(UpdateCurrentUserNickArguments) returns (NickInput);
  // PUT /guilds/{guild.id}/members/{user.id}/roles/{role.id}
  rpc AddRoleToGuildMember(MemberRoleArguments) returns (Empty);
  // DELETE /guilds/{guild.id}/members/{user.id}/roles/{role.id}
  rpc RemoveRoleFromGuildMember(MemberRoleArguments) returns (Empty);
  // DELETE /guilds/{guild.id}/members/{user.id}
  rpc KickGuildMember(GenericUserArguments) returns (Empty);
  // GET /guilds/{guild.id}/bans
  rpc GetGuildBans(SnowflakeInput) returns (ReturnBanInfos);
  // GET /guilds/{guild.id}/bans/{user.id}
  rpc GetGuildBan(GenericUserArguments) returns (BanInfo);
  // PUT /guilds/{guild.id}/bans/{user.id}
  rpc BanGuildMember(BanMemberArguments) returns (Empty);
  // DELETE /guilds/{guild.id}/bans/{user.id}
  rpc UnbanGuildMember(GenericUserArguments) returns (Empty);
  // GET /guilds/{guild.id}/roles
  rpc GetGuildRoles(SnowflakeInput) returns (ReturnRoles);
  // POST /guilds/{guild.id}/roles
  rpc CreateGuildRole(CreateRoleArguments) returns (Role);
  // PATCH /guilds/{guild.id}/roles
  rpc UpdateRolePositions(UpdateRolePositionsArguments) returns (Empty);
  // PATCH /guilds/{guild.id}/roles/{role.id}
  rpc UpdateRole(UpdateRoleArguments) returns (Role);
  // DELETE /guilds/{guild.id}/roles/{role.id}
  rpc DeleteRole(GenericRoleArguments) returns (Empty);
  // GET /guilds/{guild.id}/prune
  rpc GetGuildPruneCount(PruneArguments) returns (PruneCount);
  // POST /guilds/{guild.id}/prune
  rpc BeginGuildPrune(PruneArguments) returns (PruneCount);
  // GET /guilds/{guild.id}/regions
  rpc GetGuildRegions(SnowflakeInput) returns (ReturnVoiceRegions);
  // GET /guilds/{guild.id}/invites
  rpc GetGuildInvites(SnowflakeInput) returns (ReturnInvites);
  // GET /guilds/{guild.id}/integrations
  rpc GetGuildIntegrations(SnowflakeInput) returns (ReturnGuildIntegrations);
  // POST /guilds/{guild.id}/integrations
  rpc CreateGuildIntegration(CreateIntegrationArguments) returns (Empty);
  // PATCH /guilds/{guild.id}/integrations/{integration.id}
  rpc UpdateGuildIntegration(UpdateIntegrationArguments) returns (Empty);
  // DELETE /guilds/{guild.id}/integrations/{integration.id}
  rpc DeleteGuildIntegration(GenericIntegrationsArguments) returns (Empty);
  // POST /guilds/{guild.id}/integrations/{integration.id}/sync
  rpc SyncGuildIntegration(GenericIntegrationsArguments) returns (Empty);
  // GET /guilds/{guild.id}/embed
  rpc GetGuildEmbed(SnowflakeInput) returns (GuildEmbed);
  // PATCH /guilds/{guild.id}/embed
  rpc UpdateGuildEmbed(UpdateGuildEmbedArguments) returns (GuildEmbed);
  // GET /guilds/{guild.id}/vanity-url
  rpc GetGuildVanityCode(SnowflakeInput) returns (ReturnVanityCode);
  // GET /guilds/{guild.id}/audit-logs
  rpc GetGuildAuditLog(AuditLogArguments) returns (AuditLogResult);

  // TODO: Do we implement /guilds/{guild.id}/widget.png and /guilds/{guild.id}/embed.png ?

  // Invite
  // GET /invites/{invite.code}
  rpc GetInvite(GetInviteArguments) returns (Invite);
  // DELETE /invites/{invite.code}
  rpc DeleteInvite(InviteInput) returns (Invite);

  // User methods
  // GET /users/@me
  rpc GetCurrentUser(Empty) returns (User);
  // GET /users/{user.id}
  rpc GetUser(SnowflakeInput) returns (User);
  // PATCH /users/@me
  rpc ModifyCurrentUser(UserInput) returns (User);
  // DELETE /users/@me/guilds/{guild.id}
  rpc LeaveGuild(SnowflakeInput) returns (Empty);
  // POST /users/@me/channels
  rpc CreateDMChannel(DMInput) returns (Channel);

  // Voice methods
  // GET /voice/regions
  rpc GetVoiceRegions(Empty) returns (ReturnVoiceRegions);

  // Webhook methods
  // POST /channels/{channel.id}/webhooks
  rpc CreateChannelWebhook(CreateWebhookArguments) returns (Webhook);
  // GET /channels/{channel.id}/webhooks
  rpc GetChannelWebhooks(SnowflakeInput) returns (ReturnWebhooks);
  // GET /guilds/{guild.id}/webhooks
  rpc GetGuildWebhooks(SnowflakeInput) returns (ReturnWebhooks);
  // GET /webhooks/{webhook.id}
  rpc GetWebhook(SnowflakeInput) returns (Webhook);
  // GET /webhooks/{webhook.id}/{webhook.token}
  rpc GetWebhookWithToken(WebhookInput) returns (Webhook);
  // PATCH /webhooks/{webhook.id}
  rpc UpdateWebhook(UpdateWebhookArguments) returns (Webhook);
  // PATCH /webhooks/{webhook.id}/{webhook.token}
  rpc UpdateWebhookWithToken(UpdateWebhookWithTokenArguments) returns (Webhook);
  // DELETE /webhooks/{webhook.id}
  rpc DeleteWebhook(SnowflakeInput) returns (Empty);
  // DELETE /webhooks/{webhook.id}/{webhook.token}
  rpc DeleteWebhookWithToken(WebhookInput) returns (Empty);
  // POST /webhooks/{webhook.id}/{webhook.token}
  rpc ExecuteWebhook(ExecuteWebhookArguments) returns (Message);
}
